use koopa::ir::BinaryOp;
use crate::ast::*;

grammar;

match {
    r"\s*" => {},
    r"//[^\n\r]*[\n\r]*" => {},
    r"/\*[^*]*\*+(?:[^/*][^*]*\*+)*/" => {},
    _
}

pub Program: Program = {
    <func: FuncDef> => {
        Program { list: vec![Ok(<>)] }
    },
    <decl: Decl> => {
        Program { list: vec![Err(<>)] }
    },
    <program: Program> <func: FuncDef> => {
        let mut list = program.list;
        list.push(Ok(func));
        Program { list }
    },
    <program: Program> <decl: Decl> => {
        let mut list = program.list;
        list.push(Err(decl));
        Program { list }
    },
}

FuncDef: FuncDef = {
    <func_def_head: FuncDefHead> "(" <func_param_list: FuncParamListOrNot> ")" <block: Block> => {
        FuncDef { func_type: func_def_head.0, id: func_def_head.1, func_param_list, block }
    }
}

FuncDefHead: (FuncType, String) = {
    <def_head: DefHead> => (FuncType::Int, def_head.1),
    "void" <id: Ident> => (FuncType::Void, id)
}

FuncParamListOrNot: Vec<FuncParam> = {
    => vec![],
    <func_param_list: FuncParamList> => <>,
}

FuncParamList: Vec<FuncParam> = {
    <func_param: FuncParam> => vec![func_param],
    <func_param_list: FuncParamList> "," <func_param: FuncParam> => {
        let mut list = func_param_list;
        list.push(func_param);
        list
    }
}

FuncParam: FuncParam = <btype: BType> <ident: Ident> => FuncParam(ident);

Block: Block = "{" <block_item_list: BlockItemList> "}" => Block { <> };

BlockItemList: Vec<BlockItem> = {
    => vec![],
    <block_item_list: BlockItemList> <block_item: BlockItem> => {
        let mut list = block_item_list;
        list.push(block_item);
        list
    }
}

BlockItem: BlockItem = {
    <decl: Decl> => BlockItem::Decl(<>),
    <stmt: Stmt> => BlockItem::Stmt(<>),
}

Stmt: Stmt = {
    <stmt: OpenStmt> => <>,
    <stmt: CloseStmt> => <>,
}

OpenStmt: Stmt = {
    "if" "(" <exp: Exp> ")" <stmt: Stmt> => Stmt::If(If::single(<>)),
    "if" "(" <exp: Exp> ")" <then_stmt: CloseStmt> "else" <else_stmt: OpenStmt> => Stmt::If(If::complex(<>)),
    "while" "(" <exp: Exp> ")" <stmt: OpenStmt> => Stmt::While(exp, Box::new(stmt)),
}

CloseStmt: Stmt = {
    <simple_stmt: SimpleStmt> => <>,
    "if" "(" <exp: Exp> ")" <then_stmt: CloseStmt> "else" <else_stmt: CloseStmt> => Stmt::If(If::complex(<>)),
    "while" "(" <exp: Exp> ")" <stmt: CloseStmt> => Stmt::While(exp, Box::new(stmt)),
}

SimpleStmt: Stmt = {
    <lval: LVal> "=" <exp: Exp> ";" => Stmt::Assign(<>),
    <exp: Exp> ";" => Stmt::Exp(<>),
    <block: Block> => Stmt::Block(<>),
    "continue" ";" => Stmt::Continue,
    "break" ";" => Stmt::Break,
    "return" <exp: Exp> ";" => Stmt::Ret(Some(<>)),
    "return" ";" => Stmt::Ret(None),
    ";" => Stmt::Blank,
}

Decl: Decl = {
    <const_decl: ConstDecl> => Decl::Const(<>),
    <var_decl: VarDecl> => Decl::Var(<>),
}

VarDecl: VarDecl = {
    <def_head: DefHead> <var_def_list: VarDefList> ";" => {
        let (btype, id) = def_head;
        let (op_exp, mut list) = var_def_list;
        list.insert(0, VarDef { id: id, is_array: None, init_val: op_exp });
        VarDecl { btype: btype, var_def_list: list }
    },
    <def_head: DefHead> <array_tail: ArrayTail> <var_def_list: VarDefList> ";" => {
        let (btype, id) = def_head;
        let (op_exp, mut list) = var_def_list;
        list.insert(0, VarDef { id: id, is_array: Some(array_tail), init_val: op_exp });
        VarDecl { btype: btype, var_def_list: list }
    }
}

VarDefList: (Option<Result<Exp, Vec<Exp>>>, Vec<VarDef>) = {
    => (None, vec![<>]),
    "=" + <init_val: InitVal> => (Some(init_val), vec![]),
    <var_def_list: VarDefList> "," <var_def: VarDef> => {
        let (op_exp, mut list) = var_def_list;
        list.push(var_def);
        (op_exp, list)
    }
}

VarDef: VarDef = {
    <id: Ident> "=" <init_val: InitVal> => {
        VarDef { id: id, is_array: None, init_val: Some(init_val) }
    },
    <id: Ident> => {
        VarDef { id: id, is_array: None, init_val: None }
    },
    <id: Ident> <array_tail: ArrayTail> "=" <init_val: InitVal> => {
        VarDef { id: id, is_array: Some(array_tail), init_val: Some(init_val) }
    },
    <id: Ident> <array_tail: ArrayTail> => {
        VarDef { id: id, is_array: Some(array_tail), init_val: None }
    }
}

DefHead: (BType, String) = <btype: BType> <id: Ident> => (<>);

InitVal: Result<Exp, Vec<Exp>> = {
    <exp: Exp> => Ok(<>),
    "{" <array_list: ArrayInit> "}" => Err(<>),
    "{" "}" => Err(vec![]),
}

ArrayInit: Vec<Exp> = {
    <exp: Exp> => vec![exp],
    <array_init: ArrayInit> "," <exp: Exp> => {
        let mut list = array_init;
        list.push(exp);
        list
    }
}

ConstDecl: ConstDecl = {
    "const" <btype: BType> <const_def_list: ConstDefList> ";" => {
        ConstDecl { <> }
    }
}

BType: BType = "int" => BType::Int;

ConstDefList: Vec<ConstDef> = {
    <const_def : ConstDef> => vec![<>],
    <const_def_list: ConstDefList> "," <const_def: ConstDef> => {
        let mut list = const_def_list;
        list.push(const_def);
        list
    }
}

ConstDef: ConstDef = {
    <id: Ident> "=" <const_init_val: ConstInitVal> => {
        ConstDef { id: id, is_array: None, const_init_val: const_init_val }
    },
    <id: Ident> <array_tail: ArrayTail> "=" <const_init_val: ConstInitVal> => {
        ConstDef { id: id, is_array: Some(array_tail), const_init_val: const_init_val }
    }
}

ArrayTail: Exp = "[" <exp: ConstExp> "]" => <>;

ConstInitVal: Result<Exp, Vec<Exp>> = {
    <const_exp: ConstExp> => Ok(<>),
    "{" <array_list: ConstArrayInit> "}" => Err(<>),
    "{" "}" => Err(vec![]),
}

ConstArrayInit: Vec<Exp> = {
    <const_exp: ConstExp> => vec![const_exp],
    <array_init: ConstArrayInit> "," <const_exp: ConstExp> => {
        let mut list = array_init;
        list.push(const_exp);
        list
    }
}

ConstExp: Exp = <exp: Exp> => <>;

Exp: Exp = <lor_exp: LOrExp> => <>;

PrimaryExp: Exp = {
    "(" <exp: Exp> ")" => <>,
    <lval: LVal> => Exp::ident(<>),
    <num: Number> => Exp::single(<>),
}

LVal: LVal = {
    <id: Ident> => LVal { id: id, is_array: None },
    <id: Ident> <array_tail: ArrayTail> => LVal {id: id, is_array: Some(array_tail)}
}

Number: i32 = <num: IntConst> => <>;

UnaryExp: Exp = {
    <primary_exp: PrimaryExp> => <>,
    <unary_op: UnaryOp> <unary_exp: UnaryExp> => Exp::binary(Exp::single(0), <>),
    <ident: Ident> "(" <func_real_list: FuncRealListOrNot> ")" => Exp::call(<>),
}

FuncRealListOrNot: Vec<Exp> = {
    => vec![],
    <func_real_list: FuncRealList> => <>,
}

FuncRealList: Vec<Exp> = {
    <exp: Exp> => vec![exp],
    <func_real_list: FuncRealList> "," <exp: Exp> => {
        let mut list = func_real_list;
        list.push(exp);
        list
    }
}

UnaryOp: BinaryOp = {
    "+" => BinaryOp::Add,
    "-" => BinaryOp::Sub,
    "!" => BinaryOp::Eq,
}

MulExp: Exp = {
    <unary_exp: UnaryExp> => <>,
    <mul_exp: MulExp> <mul_op: MulOp> <unary_exp: UnaryExp> => Exp::binary(<>),
}

MulOp: BinaryOp = {
    "*" => BinaryOp::Mul,
    "/" => BinaryOp::Div,
    "%" => BinaryOp::Mod,
}

AddExp: Exp = {
    <mul_exp: MulExp> => <>,
    <add_exp: AddExp> <add_op: AddOp> <mul_exp: MulExp> => Exp::binary(<>),
}

AddOp: BinaryOp = {
    "+" => BinaryOp::Add,
    "-" => BinaryOp::Sub,
}

RelExp: Exp = {
    <add_exp: AddExp> => <>,
    <rel_exp: RelExp> <rel_op: RelOp> <add_exp: AddExp> => Exp::binary(<>),
}

RelOp: BinaryOp = {
    "<" => BinaryOp::Lt,
    ">" => BinaryOp::Gt,
    "<=" => BinaryOp::Le,
    ">=" => BinaryOp::Ge,
}

EqExp: Exp = {
    <rel_exp: RelExp> => <>,
    <eq_exp: EqExp> <eq_op: EqOp> <rel_exp: RelExp> => Exp::binary(<>),
}

EqOp: BinaryOp = {
    "==" => BinaryOp::Eq,
    "!=" => BinaryOp::NotEq,
}

LAndExp: Exp = {
    <eq_exp: EqExp> => <>,
    <land_exp: LAndExp> "&&" <eq_exp: EqExp> => {
        let e0 = Exp::binary(Exp::single(0), BinaryOp::NotEq, land_exp);
        let e1 = Exp::binary(Exp::single(0), BinaryOp::NotEq, eq_exp);
        Exp::binary(e0, BinaryOp::And, e1)
    }
}

LOrExp: Exp = {
    <land_exp: LAndExp> => <>,
    <lor_exp: LOrExp> "||" <land_exp: LAndExp> => {
        let e0 = Exp::binary(Exp::single(0), BinaryOp::NotEq, lor_exp);
        let e1 = Exp::binary(Exp::single(0), BinaryOp::NotEq, land_exp);
        Exp::binary(e0, BinaryOp::Or, e1)
    }
}

Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

IntConst: i32 = {
    r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
    r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
    r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}
